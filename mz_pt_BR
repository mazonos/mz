#!/usr/bin/env python3
#############################################################################
# mz - gerenciador de pacotes de linha de comando                           #
# Copyright (C) 2019 Diego Sarzi <diegosarzi@gmail.com>                     #
#                                                                           #
# Licença: MIT                                                              #
# Permissão é concedida, gratuitamente, a qualquer pessoa que obtiver uma   #
# cópia deste software e dos arquivos de documentação associados (ao        #
# "Software"), para lidar com o Software sem restrições, incluindo, sem     #
# limitação os direitos de usar, copiar, modificar, mesclar, publicar,      #
# distribuir, sublicenciar,e/ou vender cópias do Software, e para permitir  #
# que as pessoas a quem o software é fornecido para isso, sujeito às        #
# seguintes condições:                                                      #
# .                                                                         #
# O aviso de copyright acima e este aviso de permissão devem ser incluídos  #
# em todas as cópias ou partes substanciais do Software.                    #
# .                                                                         #
# O SOFTWARE É FORNECIDO "COMO ESTÁ", SEM GARANTIA DE QUALQUER TIPO,        #
# EXPRESSA OU IMPLÍCITA, INCLUINDO, MAS NÃO SE LIMITANDO ÀS GARANTIAS       #
# COMERCIABILIDADE, ADEQUAÇÃO A UM FIM ESPECÍFICO E NÃO VIOLAÇÃO.           #
# EM NENHUM CASO, OS AUTORES OU OS TITULARES DOS DIREITOS DE AUTOR PODERÃO  # 
# SER RESPONSABILIZADOS POR RECLAMAÇÕES, DANOS OU OUTRAS RESPONSABILIDADES, #
# QUER EM AÇÃO DE CONTRATO, DELITO OU DE OUTRA FORMA, DECORRENTE DE, FORA   #
# OU EM CONEXÃO COM SOFTWARE OU O USO OU OUTRAS OFERTAS NO SOFTWARE.        #
#---------------------------------------------------------------------------#
#                                                                           #
# Copyright: 2019 Diego Sarzi <diegosarzi@gmail.com>                        #
#            2019 Vovolinux <suporte@viniciusalopes.com.br>                 #
#                                                                           #
#############################################################################

#------------------- VARIÁVEIS ------------------------>

# Diretórios
url     = 'http://mazonos.com/packages/' # Repositório oficial
filecsv = '/var/lib/mz/mz_base.csv'      # Lista de pacotes do repositório
dircsv  = '/var/lib/mz/'                 # Diretório para o arquivo .csv
dirlist = '/var/lib/banana/list/'        # Diretório para o arquivo .list

# Flags
found = False
done  = False

# Strings
choose            = ''
textAnimate       = ''
please_connect    = 'Por favor, verifique sua conexão com a internet!'
package_not_found = 'Pacote não encontrado.'

# Arrays
chooses = [
    's', 'search',
    'i', 'install',
    'r', 'remove',
    'w', 'show',
    'u', 'update',
    'g', 'upgrade',
    'c', 'checkdesc'
    ]

modules = ['requests', 'bs4']

#------------------- FIM VARIÁVEIS -------------------->


#------------------- IMPORTAÇÕES ---------------------->

import sys, os, csv, threading, itertools, time, re

'''
Loop em modules:
    FUNÇÃO..: Instalar módulos do python3.
    DATA....: 01/07/2019
    CRÉDITOS: José Almeida <@joseafga>
              Rubens <@rubenss>
              Vovolinux <suporte@vovolinux.com.br>
'''

for module in modules:
    try:
        __import__(module)
    except Exception as e:
        print('Instalando módulos..')
        os.system('pip3 install ' + str(module))
        os.system('clear')
        
import requests, bs4

from urllib.request import urlopen
from bs4 import BeautifulSoup

#------------------- FIM IMPORTAÇÕES ------------------>



#------------------- FUNÇÕES -------------------------->

def check():
    # Verifica se o diretório existe
    if not os.path.isdir(dircsv):
        os.mkdir(dircsv)
        print('Criando diretório ' + dircsv + '.')

    # Verifica se o arquivo existe
    if not os.path.isfile(filecsv):
        os.system('touch ' + filecsv)
        print('Criando arquivo ' + filecsv + '.')
        os.system('clear')
        update()
        

def main():
    try:
        sys.argv[1]
    except IndexError:
        menu()
        exit(0)
    else:
        global choose
        choose = str(sys.argv[1])
        

def menu():
    print(''' mz 1.0.0.1 (amd64)
 'mz' é um gerenciador de pacotes de linha de comando e fornece comandos 
  para procurar e gerenciar pacotes utilizando o bananapkg.

 OPÇÕES:
 s | search    - Pesquisa pelo nome do pacote.
 i | install   - Instala o pacote.
 r | remove    - Remove o pacote.
 w | show      - Exibe a descrição do pacote.
 u | update    - Atualiza a lista de pacotes do repositório online. Precisa de internet.
 g | upgrade   - Atualização automática da base do sistema e correções de bugs.
 c | checkdesc - Procura por pacotes sem descrição no repositório online.
 
 Uso: mz [opção] pacote
''')


def internet_on():
    try:
        response = urlopen('https://www.google.com/', timeout=10)
        return True
    except:
        return False


def animate():
    for c in itertools.cycle(['|', '/', '-', '\\']):
        if done:
            break

        sys.stdout.write('\r' + textAnimate + c)
        sys.stdout.flush()
        time.sleep(0.1)
    
    text = textAnimate.replace('Pesquisando...','Pesquisa ').replace('Atualizando... ','Atualização ') + 'concluída!'
    sys.stdout.write('\r' + text + '\n')

##-------------- FUNÇÕES DE OPÇÔES DO MENU ------------>

def s():
    search()
        
def search():
    try:
        sys.argv[2]
    except IndexError:
        menu()
        exit(0)
    else:
        global found
        package = str(sys.argv[2])

        ### ABRE CSV
        with open(filecsv, 'r') as csvfile:
            csv_reader = csv.reader(csvfile)

            count = 0
            for line in csv_reader:
                if package in line[1]:
                    count += 1
                    print(line[1].replace('.mz', ''))
                    found = True
            print(str(count) + ' pacote(s) encontrado(s).')

            if not found:
                print(package_not_found)
                
def i():
    install()
                
def install():
    if internet_on():
        try:
            sys.argv[2]
        except IndexError:
            menu()
            exit(0)
        else:
            global found
            package = str(sys.argv[2])
            links = []
            packages = []
            ### ABRE CSV
            with open(filecsv, 'r') as csvfile:
                csv_reader = csv.reader(csvfile)

                for line in csv_reader:
                    if package in line[1]:
                       found = True
                       links.append(url + line[0] + line[1])   # Links para download
                       packages.append(line[1])   # Nomes de pacotes

                if found:
                    pkgcount = packages.__len__()
                    pkglist = ''

                    if pkgcount == 1:
                        install = input('Deseja instalar ' + packages[0].replace('.mz', '') + ' ? [S/n] : ')
                        if install == 'S' or install == 's':
                            os.system('wget -O /tmp/' + packages[0] + ' ' + links[0])
                            os.system('banana install ' + '/tmp/' + packages[0])
                            os.system('rm ' + '/tmp/' + packages[0])
                        else:
                            exit(0)
                    else:
                        # Cria lista de pacotes
                        if pkgcount == 2:
                            pkglist = "'" + packages[0].replace('.mz', '') + "' e '" + packages[1].replace('.mz', '') + "'."
                        else:
                            for p in packages:
                                 pkglist += (p + ', ')

                            pkglist = pkglist[:-2] + '.'

                        print(str(pkgcount) + ' pacotes encontrados: ' + pkglist.replace('.mz', ''))

                        install = input('Deseja instalar TODOS os pacotes ? [S/n] : ')
                        if install == 'S' or install == 's':
                            for p in range(pkgcount):
                                os.system('wget -O /tmp/' + packages[p] + ' ' + links[p])
                                os.system('banana install ' +  '/tmp/' + packages[p])
                                os.system('rm ' + '/tmp/' + packages[p])
                            else:
                                exit(0)

                else: # found == FALSE
                    print(package_not_found)

    else:
        print(please_connect)
        exit(0)

def r():
    remove()

def remove():
    try:
        sys.argv[2]
    except IndexError:
        menu()
        exit(0)
    else:
        global found
        onlyfiles = [f for f in os.listdir(dirlist) if os.path.isfile(os.path.join(dirlist, f))]
        r = re.compile(sys.argv[2] + '.*')
        newlist = list(filter(r.match, onlyfiles))

        if newlist:
            found = True
            for pack in newlist:
                package = pack.replace('.list', '')
                remove  = input('Deseja remover ' + package + '? [S/n] : ')
                if remove == 'S' or remove == 's':
                    os.system('banana remove ' + package + ' -y')
                else:
                    exit(0)

        if not found:
            print(package_not_found)

def w():
    show()
    
def show():
    try:
        sys.argv[2]
    except IndexError:
        menu()
        exit(0)
    else:
        global found
        package = str(sys.argv[2])

        ### ABRE CSV
        with open(filecsv, 'r') as csvfile:
            csv_reader = csv.reader(csvfile)

            for line in csv_reader:
                if package in line[1]:
                    found = True

                    pkgname = line[1].split('-')[0]
                    version = line[1].replace(pkgname + '-','').replace('.mz','')

                    # Tentando obter o .desc
                    internet = internet_on()
                    nodesc = True
                    if not line[2] == '':
                        if internet:
                            r = requests.get(url + line[0] + line[2])
                            if not r.status_code == 404:
                                # File not found (404 error) - pkgname-version.desc
                                nodesc = False
                                text = r.text

                    # Armazena o mantenedor e a descrição
                    if nodesc:
                        maintainer = '(não identificado)'
                        desc = 'A descrição deste pacote não está disponível!'

                        if not internet:
                            desc += '\n' + please_connect
                    else:
                        maintainer = (re.findall('maintainer.*', text)[0]).replace("'", '').replace('maintainer=', '').replace('"', '')
                        desc = ((text.split('|')[2]).replace('#', '').replace('=', '').replace('desc"', ''))[:-2]

                    print('Nome do Pacote: ' + pkgname)
                    print('Versão........: ' + version)
                    print('Mantenedor....: ' + maintainer)
                    print(desc)
                    print('-------------------------------------------------------------------------\n')

            if not found:
                print(package_not_found)

def u():
    update()

def update():
    if internet_on():
        global textAnimate
        global done

        textAnimate = 'Atualizando... '

        t = threading.Thread(target=animate)
        t.start()

        ### ATUALIZAÇÃO WEB
        r = requests.get(url)
        
        soup = BeautifulSoup(r.content, 'html.parser')
        links = soup.find_all('a')
        
        if os.path.isfile(filecsv):
            os.system('rm ' + filecsv)

        for link in links:
            if '/' in link.text:
                urls = url + link.text
                r = requests.get(urls)

                soups = BeautifulSoup(r.content, 'html.parser')
                linkss = soups.find_all('a')
                
                folder = link.text
                mz = ''
                desc = ''
                sha256 = ''

                for l in linkss:
                    if '.mz' in l.text:
                        if l.text.endswith(('.mz')):
                            mz = l.text
                       
                        if l.text.endswith(('.desc')):
                            desc = l.text

                        if l.text.endswith(('.sha256')):
                            sha256 = l.text
                        
                        if mz != '' and sha256 != '':
                            with open(filecsv, 'a') as new_file:
                                csv_writer = csv.writer(new_file)
                                csv_writer.writerow([folder,mz,desc,sha256])
                                mz = ''
                                desc = ''
                                sha256 = ''
        done = True
    else:
        print(please_connect)

def g():
    upgrade()

def upgrade():
    print('Atualizando...')

def c():
    checkdesc()

def checkdesc():
    if internet_on():
        update()

        global textAnimate
        global done

        found = False
        nodescs = []

        textAnimate = 'Pesquisando... '
        t = threading.Thread(target=animate)
        t.start()

        ### ABRE CSV
        with open(filecsv, 'r') as csvfile:
            csv_reader = csv.reader(csvfile)

            for line in csv_reader:
                if line[2] == '':
                    found = True
                    nodescs.append(' ' + line[0] + line[1] + '.desc -> não encontrado!')
            done = True

        if found:
            print('Os seguintes pacotes não possuem o arquivo .desc:')
            for n in nodescs:
                print(n)
        else:
            print('Todos os pacotes OK!')

    else:
        print(please_connect)
        exit(0)

##------------ FIM FUNÇÕES DE OPÇÔES DO MENU ---------->

#------------------- FIM FUNÇÕES ---------------------->

try:
    check()

    main()

    if choose in chooses:
        functions = locals()
        functions[choose]()
    else:
        menu()
        print('Opção \"' + choose + '\" inválida!')

except KeyboardInterrupt:
    print('\n')
    exit(0)

